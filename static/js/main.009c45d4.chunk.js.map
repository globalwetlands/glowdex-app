{"version":3,"sources":["common/Spinner.module.css","app/App.module.css","common/SliderInput.module.css","common/Spinner.js","redux/globalSettingsSlice.js","utils/mapUtils.js","features/map/mapStyles.js","features/map/Map.js","utils/utils.js","utils/colorUtils.js","utils/dataUtils.js","utils/dataHooks.js","common/SliderInput.js","features/widgets/charts/TypologyBoxPlot.js","features/widgets/GridItemWidget.js","features/widgets/MapLegend.js","common/IconButton.js","common/Popup.js","images/fig1.png","features/widgets/Menu.js","features/widgets/WidgetBox.js","features/widgets/Widgets.js","app/App.js","redux/store.js","index.js"],"names":["module","exports","Spinner","isSmall","props","size","className","styles","spinner","width","height","viewBox","xmlns","pathSmall","path","fill","strokeWidth","strokeLinecap","cx","cy","r","availableNumberClusters","initialState","showMenuHelpText","selectedGridItems","numberOfClusters","typologyBoxPlotQuantile","enabledHabitats","globalSettingsSlice","createSlice","name","reducers","hideMenuHelpText","state","setSelectedGridItems","action","payload","setNumberOfClusters","number","includes","setTypologyBoxPlotQuantile","toggleEnabledHabitat","habitat","_","xor","actions","getBboxCenter","minLng","minLat","maxLng","maxLat","latitude","longitude","formatCoordinate","formatcoords","format","decimalPlaces","gridLayerStyle","id","type","paint","gridLayerHoverStyle","gridLayerSelectedStyle","Map","mapFeatures","gridItems","clusters","isLoading","mapRef","useRef","dispatch","useDispatch","useSelector","globalSettings","viewport","setViewport","useState","zoom","minZoom","hoveredFeature","setHoveredFeature","fitBounds","useCallback","async","feature","duration","bbox","updatedViewport","transitionDuration","transitionInterpolator","FlyToInterpolator","ms","Promise","resolve","setTimeout","delay","hoveredFeatureFilter","useMemo","properties","ID","selectedFeatureFilter","mapStyle","onViewportChange","mapboxApiAccessToken","process","onHover","e","features","srcEvent","offsetX","offsetY","find","f","layer","x","y","onMouseOut","onClick","clickedFeature","ref","getCursor","isHovering","isDragging","data","filter","clusterNumber","gridItem","item","parseInt","cluster","n","style","left","top","TERRITORY1","backgroundColor","fillColor","border","color","fontWeight","renderTooltip","position","opacify","alpha","chroma","css","fetcher","args","fetch","then","res","json","fetcherCsv","text","csvString","Papa","parse","header","dynamicTyping","parseCsv","indicatorColnames","chain","indicatorLabels","map","indicatorRow","habitatLabel","habitatColor","sortBy","keyBy","value","indicatorColnamesKeys","Object","keys","generateMapFeatures","clusterItems","reduce","allFeatures","matchingClusterItem","habitatKey","mg","sm","sg","some","key","checkHabitatPresence","push","useMapData","gridGeojson","useSWR","allClusters","gridItemData","gridItemResidualsData","residuals","length","console","time","clusterCol","colorCol","mang_presence","salt_presence","seag_presence","isNaN","getClusterItems","timeEnd","clusterItemsArr","values","uniqBy","generateClusters","isEmpty","colors","fillColors","clusterNumbers","generateGridLayerStyle","gridItemsPerCluster","groupBy","SliderInput","onChange","debounceMs","val","setVal","useDebounce","Plot","createPlotlyComponent","Plotly","config","displayModeBar","layout","plot_bgcolor","paper_bgcolor","showlegend","legend","hovermode","margin","l","t","b","xaxis","showticklabels","zeroline","range","mirror","tickmode","yaxis","tickfont","boxgap","getColumnDisplayName","colName","label","toLowerCase","selectedCellMarker","symbol","line","useTypologyPlotData","significantIndicatorColumns","habitatPresence","filteredColumns","getColumnHabitat","columnsByDimension","columns","col","dimension","groupedPlots","indicatorColumns","boxplots","reverse","getColumnColor","marker","currentGridItemMarkers","displayName","currentGridItemLegendTrace","TypologyBoxPlot","quantileValue","containerRef","useMeasure","columnSignificance","accessor","upper","quantile","lower","Math","sign","index","significanceFactor","filterSignificantData","GridItemWidget","selectedGridItemData","centerCoords","TypologyBoxPlotQuantileInput","maxWidth","marginBottom","min","max","step","MapLegend","HabitatCheckbox","title","target","checked","borderColor","IconButton","Icon","role","onKeyDown","code","tabIndex","Popup","modalIsOpen","setModalIsOpen","children","closeModal","isOpen","onAfterOpen","onRequestClose","overlayClassName","CloseIcon","Modal","setAppElement","MenuPopupContent","src","fig1","alt","MenuIcon","stroke","strokeLinejoin","d","x1","y1","x2","y2","Menu","menuIsOpen","setMenuIsOpen","WidgetBox","onClose","Widgets","mapFeatureIds","selectedID","mapFeature","useSelectedGridItemData","initialPanelSizes","App","main","direction","SplitDirection","Horizontal","initialSizes","minWidth","gutterClassName","ReactSplitGutterHorizontal","draggerClassName","ReactSplitDraggerHorizontal","rootReducer","combineReducers","reducer","persistConfig","storage","persistReducer","createPersistedReducer","whitelist","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.009c45d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__1QSjx\",\"rotator\":\"Spinner_rotator__ldWJL\",\"path\":\"Spinner_path__B6xE1\",\"dash\":\"Spinner_dash__3VCIb\",\"colors\":\"Spinner_colors__3EM4d\",\"pathSmall\":\"Spinner_pathSmall__1zioJ\",\"dashSmall\":\"Spinner_dashSmall__2ti9Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__3cTDB\",\"ReactSplitGutterHorizontal\":\"App_ReactSplitGutterHorizontal__15IR8\",\"ReactSplitDraggerHorizontal\":\"App_ReactSplitDraggerHorizontal__2flWb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SliderInput\":\"SliderInput_SliderInput__2uRuk\"};","import styles from './Spinner.module.css'\n\nexport function Spinner({ isSmall = false, ...props }) {\n  const size = isSmall ? 25 : 66\n  return (\n    <svg\n      className={styles.spinner}\n      data-testid=\"spinner\"\n      width={size}\n      height={size}\n      viewBox={`0 0 ${size} ${size}`}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <circle\n        className={isSmall ? styles.pathSmall : styles.path}\n        fill=\"none\"\n        strokeWidth={size / 10}\n        strokeLinecap=\"round\"\n        cx={size / 2}\n        cy={size / 2}\n        r={size / 2 - 3}\n      />\n    </svg>\n  )\n}\n","import _ from 'lodash'\n\nimport { createSlice } from '@reduxjs/toolkit'\n\nexport const availableNumberClusters = [5, 18]\n\nconst initialState = {\n  showMenuHelpText: true,\n  selectedGridItems: [],\n  numberOfClusters: 5,\n  typologyBoxPlotQuantile: 0.8,\n  enabledHabitats: ['mg', 'sm', 'sg'],\n}\n\nconst globalSettingsSlice = createSlice({\n  name: 'globalSettings',\n  initialState,\n  reducers: {\n    hideMenuHelpText: (state) => {\n      state.showMenuHelpText = false\n    },\n    setSelectedGridItems: (state, action) => {\n      state.selectedGridItems = action.payload\n    },\n    setNumberOfClusters: (state, action) => {\n      const number = action.payload\n      if (availableNumberClusters.includes(number)) {\n        state.numberOfClusters = number\n      }\n    },\n    setTypologyBoxPlotQuantile: (state, action) => {\n      state.typologyBoxPlotQuantile = action.payload\n    },\n    toggleEnabledHabitat: (state, action) => {\n      const habitat = action.payload\n\n      if (initialState.enabledHabitats.includes(habitat)) {\n        state.enabledHabitats = _.xor(state.enabledHabitats, [habitat])\n      }\n    },\n  },\n})\n\nexport const {\n  hideMenuHelpText,\n  setNumberOfClusters,\n  setTypologyBoxPlotQuantile,\n  toggleEnabledHabitat,\n  setSelectedGridItems,\n} = globalSettingsSlice.actions\n\nexport default globalSettingsSlice.reducer\n","import formatcoords from 'formatcoords'\n\nexport function getBboxCenter({ minLng, minLat, maxLng, maxLat }) {\n  const centerLat = (minLat + maxLat) / 2\n  const centerLng = (minLng + maxLng) / 2\n  return { latitude: centerLat, longitude: centerLng }\n}\n\nexport function formatCoordinate({ latitude, longitude }) {\n  return formatcoords(latitude, longitude).format('FFf', { decimalPlaces: 1 })\n}\n","export const gridLayerStyle = {\n  id: 'gridItems',\n  type: 'fill',\n  paint: {\n    'fill-opacity': 1,\n    'fill-outline-color': ['get', 'color'],\n    'fill-color': ['get', 'fillColor'],\n  },\n}\n\nexport const gridLayerHoverStyle = {\n  id: 'gridItemsHighlighted',\n  type: 'fill',\n  paint: {\n    'fill-opacity': 1,\n    'fill-outline-color': ['get', 'color'],\n    'fill-color': ['get', 'color'],\n  },\n}\n\nexport const gridLayerSelectedStyle = {\n  id: 'gridItemsSelected',\n  type: 'fill',\n  paint: {\n    'fill-opacity': 1,\n    'fill-outline-color': ['get', 'color'],\n    'fill-color': ['get', 'color'],\n  },\n}\n","import './Map.css'\n\nimport { useCallback, useMemo, useRef, useState } from 'react'\nimport {\n  FlyToInterpolator,\n  Layer,\n  InteractiveMap as MapGL,\n  NavigationControl,\n  Source,\n} from 'react-map-gl'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport bbox from '@turf/bbox'\n\nimport { Spinner } from '../../common/Spinner'\nimport { setSelectedGridItems } from '../../redux/globalSettingsSlice'\nimport { getBboxCenter } from '../../utils/mapUtils'\nimport { delay } from '../../utils/utils'\nimport {\n  gridLayerHoverStyle,\n  gridLayerSelectedStyle,\n  gridLayerStyle,\n} from './mapStyles'\n\nexport function Map({ mapFeatures, gridItems, clusters, isLoading }) {\n  const mapboxApiAccessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN\n  const mapStyle =\n    'mapbox://styles/ejinks-gu/ckhycntp61ol31am7qum156sk?optimize=true'\n  const mapRef = useRef()\n\n  const dispatch = useDispatch()\n  const selectedGridItems = useSelector(\n    (state) => state.globalSettings.selectedGridItems\n  )\n\n  const [viewport, setViewport] = useState({\n    // width: 400,\n    // height: 400,\n    latitude: 20,\n    longitude: 0,\n    zoom: 2,\n    minZoom: 2,\n  })\n\n  const [hoveredFeature, setHoveredFeature] = useState({})\n\n  const fitBounds = useCallback(\n    async (feature, duration = 250) => {\n      // calculate the bounding box of the feature\n      if (!feature) return\n      const [minLng, minLat, maxLng, maxLat] = bbox(feature)\n      const { longitude, latitude } = getBboxCenter({\n        minLng,\n        minLat,\n        maxLng,\n        maxLat,\n      })\n\n      const zoom = 5\n\n      const updatedViewport = {\n        ...viewport,\n        longitude,\n        latitude,\n        zoom,\n        transitionDuration: duration,\n        transitionInterpolator: new FlyToInterpolator(),\n        // transitionEasing: d3.easeCubic,\n      }\n      setViewport(updatedViewport)\n      await delay(duration + 50)\n      return\n    },\n    [viewport]\n  )\n\n  const onHover = (e) => {\n    const {\n      features,\n      srcEvent: { offsetX, offsetY },\n    } = e\n    const hoveredFeature =\n      features && features.find((f) => f.layer.id === gridLayerStyle.id)\n\n    setHoveredFeature({\n      feature: hoveredFeature,\n      x: offsetX,\n      y: offsetY,\n    })\n  }\n\n  const onMouseOut = () => {\n    setHoveredFeature({})\n  }\n\n  const onClick = async (e) => {\n    const { features } = e\n    const clickedFeature =\n      features && features.find((f) => f.layer.id === gridLayerStyle.id)\n    if (clickedFeature) {\n      const { ID } = clickedFeature.properties\n      await fitBounds(clickedFeature)\n      dispatch(setSelectedGridItems([ID]))\n    }\n  }\n\n  const renderTooltip = () => {\n    const { feature, x, y } = hoveredFeature\n\n    if (!feature) {\n      return null\n    }\n\n    const id = feature.properties?.ID\n    const clusterNumber = feature.properties?.clusterNumber\n\n    const gridItem = gridItems.find((item) => parseInt(item.ID) === id)\n\n    const cluster = clusters.find(({ n }) => n === clusterNumber)\n\n    return (\n      feature && (\n        <div className=\"Map--Tooltip\" style={{ left: x, top: y }}>\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag\">ID</span>\n              <span className=\"tag has-text-weight-bold\">{gridItem?.ID}</span>\n            </div>\n          </div>\n\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag\">Country</span>\n              <span className=\"tag has-text-weight-bold\">\n                {gridItem?.TERRITORY1}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag\">Typology</span>\n              <span\n                className=\"tag\"\n                style={{\n                  backgroundColor: cluster.fillColor,\n                  border: `1px solid ${cluster.color}`,\n                  fontWeight: 600,\n                }}\n              >\n                {clusterNumber}\n              </span>\n            </div>\n          </div>\n        </div>\n      )\n    )\n  }\n\n  const getCursor = (e) => {\n    if (e.isHovering) {\n      return 'pointer'\n    }\n    if (e?.isDragging) {\n      return 'grabbing'\n    }\n    if (hoveredFeature?.feature) {\n      return 'crosshair'\n    }\n    return 'grab'\n  }\n\n  const hoveredFeatureFilter = useMemo(() => {\n    // A filter that matches the hovered feature by ID\n    return ['==', 'ID', hoveredFeature?.feature?.properties?.ID || false]\n  }, [hoveredFeature])\n\n  const selectedFeatureFilter = useMemo(() => {\n    // A filter that matches the selected features by ID\n    return ['in', ['get', 'ID'], ['literal', selectedGridItems]]\n  }, [selectedGridItems])\n\n  return (\n    <div className=\"Map\" data-testid=\"Map\">\n      <MapGL\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle={mapStyle}\n        onViewportChange={setViewport}\n        mapboxApiAccessToken={mapboxApiAccessToken}\n        onHover={onHover}\n        onMouseOut={onMouseOut}\n        onClick={onClick}\n        ref={mapRef}\n        getCursor={getCursor}\n      >\n        <NavigationControl\n          className=\"Map--NavigationControl\"\n          onViewportChange={setViewport}\n        />\n\n        {!isLoading && (\n          <Source\n            type=\"geojson\"\n            data={{ type: 'FeatureCollection', features: mapFeatures }}\n          >\n            <Layer {...gridLayerStyle} />\n            <Layer {...gridLayerHoverStyle} filter={hoveredFeatureFilter} />\n            <Layer {...gridLayerSelectedStyle} filter={selectedFeatureFilter} />\n          </Source>\n        )}\n\n        {renderTooltip()}\n      </MapGL>\n\n      {isLoading && (\n        <Spinner\n          style={{\n            position: 'absolute',\n            top: 'calc(50% - 33px)',\n            left: 'calc(50% - 33px)',\n          }}\n        />\n      )}\n    </div>\n  )\n}\n","export async function delay(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n","import chroma from 'chroma-js'\n\nexport function getBrewerColors({ scaleName = 'Set2', alpha = 1 } = {}) {\n  let scale = chroma.brewer?.[scaleName]\n\n  if (alpha < 1) {\n    scale = scale.map((color) => opacify({ color, alpha }))\n  }\n\n  return scale\n}\n\nexport function opacify({ color, alpha }) {\n  return chroma(color).alpha(alpha).css()\n}\n","import _ from 'lodash'\nimport Papa from 'papaparse'\n\nimport indicatorLabels from './indicator-labels.json'\n\nexport const fetcher = (...args) => fetch(...args).then((res) => res.json())\nexport const fetcherCsv = (...args) =>\n  fetch(...args)\n    .then((res) => res.text())\n    .then((csvString) => parseCsv({ csvString }))\n\nexport const loadGeojson = async ({\n  name = 'grid', // country, aoi, wdpa\n}) => {\n  const dataUrl = `${process.env.PUBLIC_URL}/geojson/${name}.json`\n  console.log('Loading geojson data', dataUrl)\n  // await delay(1000)\n  const data = await fetch(dataUrl).then((res) => res.json())\n  return data\n}\n\nexport const loadSingleLocationData = async (locationID) => {\n  console.log(`Loading location ${locationID} data`)\n  const dataUrl = `${process.env.PUBLIC_URL}/locations_data/${locationID}.json`\n  const data = fetch(dataUrl).then((res) => res.json())\n  // await delay(1000)\n  return data\n}\n\nexport async function parseCsv({ csvString }) {\n  const { data } = Papa.parse(csvString, { header: true, dynamicTyping: true })\n  return data\n}\n\nfunction mapHabitatData(indicatorRow) {\n  let habitatLabel = ''\n  let habitatColor = ''\n  switch (indicatorRow.habitat) {\n    // #ff5500\n    // #00aacc\n    case 'mg':\n      habitatLabel = 'Mangrove'\n      habitatColor = 'hsla(0, 66%, 63%, 1)'\n      break\n\n    case 'sg':\n      habitatLabel = 'Seagrass'\n      habitatColor = 'hsla(83, 53%, 59%, 1)'\n      break\n\n    case 'sm':\n      habitatLabel = 'Saltmarsh'\n      habitatColor = 'hsla(161, 53%, 58%, 1)'\n      break\n\n    default:\n      habitatLabel = ''\n  }\n  return { ...indicatorRow, habitatLabel, habitatColor }\n}\n\nexport const indicatorColnames = _.chain(indicatorLabels)\n  .map(mapHabitatData)\n  .sortBy(['habitat', 'indicator'])\n  .keyBy('indicator')\n  .value()\n\nexport const indicatorColnamesKeys = Object.keys(indicatorColnames)\n","import _ from 'lodash'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport useSWR from 'swr'\n\nimport bbox from '@turf/bbox'\n\nimport { availableNumberClusters } from '../redux/globalSettingsSlice'\nimport { opacify } from './colorUtils'\nimport { fetcher, fetcherCsv } from './dataUtils'\nimport { getBboxCenter } from './mapUtils'\n\nexport function generateGridLayerStyle({ clusters }) {\n  const colors = clusters.map((cluster) => cluster.color)\n  const fillColors = clusters.map((cluster) => cluster.fillColor)\n  const clusterNumbers = clusters.map((cluster) => cluster.n)\n  return {\n    id: `gridItems`,\n    type: 'fill',\n    paint: {\n      'fill-opacity': 1,\n      // TODO: Add hover state\n      'fill-outline-color': [\n        'to-color',\n        [\n          'at',\n          ['index-of', ['get', 'clusterNumber'], ['literal', clusterNumbers]],\n          ['literal', colors],\n        ],\n      ],\n      'fill-color': [\n        'to-color',\n        [\n          'at',\n          ['index-of', ['get', 'clusterNumber'], ['literal', clusterNumbers]],\n          ['literal', fillColors],\n        ],\n      ],\n    },\n  }\n}\n\nfunction getClusterItems({ numberOfClusters, allClusters }) {\n  if (!availableNumberClusters.includes(numberOfClusters)) {\n    // set default number of clusters\n    numberOfClusters = availableNumberClusters[0]\n  }\n  // change cluster data types to Integers\n  const clusterCol = `cluster_${numberOfClusters}`\n  const colorCol = `hex_${numberOfClusters}`\n  const clusterItems = allClusters\n    ?.map((item) => {\n      return {\n        ID: parseInt(item.ID, 10),\n        cluster: parseInt(item?.[clusterCol], 10),\n        color: item?.[colorCol],\n        mang_presence: item.mang_presence,\n        salt_presence: item.salt_presence,\n        seag_presence: item.seag_presence,\n      }\n    })\n    .filter((item) => !_.isNaN(item.cluster))\n\n  const clusterItemsObj = _.keyBy(clusterItems, 'ID')\n  return clusterItemsObj\n}\n\nfunction generateMapFeatures({\n  mapFeatures,\n  clusterItems,\n  clusters,\n  enabledHabitats,\n}) {\n  function checkHabitatPresence(item) {\n    const habitatKey = {\n      mg: 'mang_presence',\n      sm: 'salt_presence',\n      sg: 'seag_presence',\n    }\n    const hasHabitatPresence = _.some(\n      enabledHabitats,\n      (key) => item[habitatKey[key]] === 1\n    )\n    return hasHabitatPresence\n  }\n\n  function addFeatureProps(allFeatures, feature) {\n    // Add cluster item props to feature\n    const matchingClusterItem = clusterItems?.[feature.properties.ID]\n\n    // Filter out if no habitat presence\n    const hasHabitatPresence = checkHabitatPresence(matchingClusterItem)\n    if (!hasHabitatPresence) {\n      return allFeatures\n    }\n\n    const cluster = clusters.find(({ n }) => n === matchingClusterItem?.cluster)\n\n    const { color, fillColor, n } = cluster\n\n    allFeatures.push({\n      ...feature,\n      properties: {\n        ...feature.properties,\n        clusterNumber: n,\n        color,\n        fillColor,\n        value: n,\n      },\n    })\n    return allFeatures\n  }\n\n  return mapFeatures.reduce(addFeatureProps, [])\n}\n\nfunction generateClusters({ clusterItems }) {\n  const clusterItemsArr = clusterItems ? Object.values(clusterItems) : []\n  const uniqClusters = _.chain(clusterItemsArr)\n    .uniqBy('cluster')\n    .sortBy('cluster')\n    .value()\n  const clusters = uniqClusters.map(({ cluster, color }) => {\n    const fillColor = opacify({ color, alpha: 0.3 })\n    return { n: cluster, color, fillColor }\n  })\n\n  return clusters\n}\n\nexport function useMapData() {\n  const numberOfClusters = useSelector(\n    (state) => state.globalSettings.numberOfClusters\n  )\n  const enabledHabitats = useSelector(\n    (state) => state.globalSettings.enabledHabitats\n  )\n  const { data: gridGeojson } = useSWR(\n    `${process.env.PUBLIC_URL}/data/grid.geojson`,\n    fetcher\n  )\n  const { data: allClusters } = useSWR(\n    `${process.env.PUBLIC_URL}/data/all-clusters.csv`,\n    fetcherCsv\n  )\n  const { data: gridItemData } = useSWR(\n    `${process.env.PUBLIC_URL}/data/grid-items.csv`,\n    fetcherCsv\n  )\n  const { data: gridItemResidualsData } = useSWR(\n    `${process.env.PUBLIC_URL}/data/grid-items-residuals.csv`,\n    fetcherCsv\n  )\n\n  const gridItems = useMemo(() => {\n    if (gridItemData && gridItemResidualsData) {\n      return gridItemData.map((gridItem) => {\n        const residuals = gridItemResidualsData.find(\n          ({ ID }) => ID === gridItem.ID\n        )\n        return {\n          ...gridItem,\n          residuals,\n        }\n      })\n    } else {\n      return []\n    }\n  }, [gridItemData, gridItemResidualsData])\n\n  const isLoading = useMemo(\n    () => !gridGeojson || !allClusters,\n    [allClusters, gridGeojson]\n  )\n\n  const clusterItems = useMemo(() => {\n    if (allClusters?.length) {\n      console.time('getClusterItems')\n      const clusterItems = getClusterItems({\n        numberOfClusters,\n        allClusters,\n      })\n      console.timeEnd('getClusterItems')\n      return clusterItems\n    }\n  }, [allClusters, numberOfClusters])\n\n  const clusters = useMemo(\n    () => generateClusters({ clusterItems }),\n    [clusterItems]\n  )\n\n  const mapFeatures = useMemo(() => {\n    if (\n      gridGeojson?.features &&\n      !_.isEmpty(clusterItems) &&\n      !_.isEmpty(clusters)\n    ) {\n      console.time('generateMapFeatures')\n\n      const mapFeatures = generateMapFeatures({\n        clusterItems,\n        clusters,\n        mapFeatures: gridGeojson?.features,\n        enabledHabitats,\n      })\n\n      console.timeEnd('generateMapFeatures')\n      return mapFeatures\n    } else {\n      return []\n    }\n  }, [clusterItems, clusters, gridGeojson?.features, enabledHabitats])\n\n  const gridLayerStyle = useMemo(() => {\n    const gridLayerStyle = generateGridLayerStyle({\n      clusters,\n    })\n    return gridLayerStyle\n  }, [clusters])\n\n  const gridItemsPerCluster = useMemo(() => {\n    if (gridItems && clusterItems) {\n      console.time('gridItemsPerCluster')\n      const gridItemsPerCluster = _.groupBy(gridItems, ({ ID }) => {\n        return clusterItems?.[parseInt(ID)]?.cluster\n      })\n      console.timeEnd('gridItemsPerCluster')\n      return gridItemsPerCluster\n    } else {\n      return undefined\n    }\n  }, [clusterItems, gridItems])\n\n  return {\n    mapFeatures,\n    allClusters,\n    clusters,\n    clusterItems,\n    gridItems,\n    isLoading,\n    gridLayerStyle,\n    gridItemsPerCluster,\n  }\n}\n\nexport function useSelectedGridItemData({ gridItems, mapFeatures }) {\n  // Returns the selected grid item data\n\n  const selectedGridItems = useSelector(\n    (state) => state.globalSettings.selectedGridItems\n  )\n\n  const selectedGridItemData = useMemo(() => {\n    const mapFeatureIds = mapFeatures.map((feature) => feature.properties.ID)\n\n    if (selectedGridItems?.length && gridItems?.length) {\n      // remove filtered out selectedItems\n      const filteredSelectedGridItems = selectedGridItems.filter((selectedID) =>\n        mapFeatureIds.includes(selectedID)\n      )\n\n      // for each selected ID, get the data for that ID\n      const selectedGridItemsData = filteredSelectedGridItems.map(\n        (selectedID) => {\n          // Find grid item data by ID\n          const gridItem = gridItems.find(\n            ({ ID }) => selectedID === parseInt(ID)\n          )\n          // Find map feature props by ID\n          const mapFeature = mapFeatures.find(\n            (feature) => feature.properties.ID === selectedID\n          )\n\n          const [minLng, minLat, maxLng, maxLat] = bbox(mapFeature)\n          const centerCoords = getBboxCenter({ minLng, minLat, maxLng, maxLat })\n          const featureProps = mapFeature?.properties || {}\n\n          return { ...gridItem, ...featureProps, centerCoords }\n        }\n      )\n      return selectedGridItemsData\n    } else {\n      return []\n    }\n  }, [selectedGridItems, gridItems, mapFeatures])\n  return { selectedGridItemData }\n}\n","import '@reach/slider/styles.css'\n\nimport { useState } from 'react'\nimport { useDebounce } from 'react-use'\n\nimport Slider from '@reach/slider'\n\nimport styles from './SliderInput.module.css'\n\nexport function SliderInput({ value, onChange, debounceMs = 0, ...props }) {\n  const [val, setVal] = useState(value)\n\n  // Debounce onChange handler\n  useDebounce(\n    () => {\n      onChange(val)\n    },\n    debounceMs,\n    [val]\n  )\n\n  return (\n    <Slider\n      className={styles.SliderInput}\n      value={val}\n      onChange={(value) => setVal(value)}\n      {...props}\n    />\n  )\n}\n","import { quantile } from 'd3-array'\nimport _ from 'lodash'\nimport Plotly from 'plotly.js-cartesian-dist'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { useSelector } from 'react-redux'\nimport { useMeasure } from 'react-use'\n\nimport {\n  indicatorColnames,\n  indicatorColnamesKeys,\n} from '../../../utils/dataUtils'\n\n// Using a smaller precompiled version of plotly.js\n// https://github.com/plotly/react-plotly.js/issues/98#issuecomment-689075526\nconst Plot = createPlotlyComponent(Plotly)\n\nconst config = {\n  displayModeBar: false,\n}\n\nconst layout = {\n  plot_bgcolor: 'transparent',\n  paper_bgcolor: 'transparent',\n  showlegend: false,\n  legend: {\n    x: 0,\n    y: 2,\n  },\n  hovermode: false,\n  margin: {\n    l: 200,\n    r: 0,\n    t: 15,\n    b: 15,\n  },\n  xaxis: {\n    // title: 'Val',\n    showticklabels: 'true',\n    zeroline: true,\n    range: [-4, 4.1],\n    mirror: 'ticks',\n    tickmode: 'linear',\n  },\n  yaxis: {\n    // title: 'Indicator',\n    // tickangle: -90,\n    showticklabels: true,\n    tickfont: {\n      size: 11,\n    },\n  },\n  boxgap: 0.1,\n}\n\nfunction getColumnDisplayName(colName) {\n  return `${indicatorColnames[colName]?.habitatLabel} ${indicatorColnames[\n    colName\n  ]?.label?.toLowerCase()}`\n}\n\nfunction getColumnColor(colName) {\n  return indicatorColnames[colName]?.habitatColor\n}\n\nfunction getColumnHabitat(colName) {\n  return indicatorColnames[colName]?.habitat\n}\n\nconst selectedCellMarker = {\n  size: 7,\n  symbol: 'diamond',\n  color: '#ffaaff',\n  line: { color: '#cc00ff', width: 1 },\n}\n\nfunction filterSignificantData({\n  quantileValue,\n  gridItems,\n  columns = indicatorColnamesKeys,\n}) {\n  const residuals = gridItems.map((item) => item.residuals)\n  /*\n  R code\n  dat_signif <- dtemp %>%\n    group_by(Indicator, Cluster) %>%\n    summarize(upr = quantile(Val, 0.5 + (input$quant/2), \n                            na.rm = TRUE),\n              lwr = quantile(Val, 0.5 - input$quant/2, \n                            na.rm = TRUE)) %>%\n    mutate(\n          signif = (sign(lwr) == sign(upr))*sign(upr)\n          \n    )\n\n    left_join(dtemp, dat_signif) %>%\n      filter(signif !=0)\n    \n  })\n*/\n  const indicatorColumnSignificance = (colName) => {\n    const accessor = (item) => item[colName]\n    const upper = quantile(residuals, 0.5 + quantileValue / 2, accessor)\n    const lower = quantile(residuals, 0.5 - quantileValue / 2, accessor)\n\n    // TODO: check this significance test\n    const significanceFactor =\n      Math.sign(lower) === Math.sign(upper) ? Math.sign(upper) : 0\n\n    return significanceFactor\n  }\n\n  const columnSignificance = columns.map(indicatorColumnSignificance)\n\n  const significantIndicatorColumns = columns\n    .map((colName, index) => ({\n      colName,\n      significanceFactor: columnSignificance[index],\n    }))\n    .filter(({ significanceFactor }) => significanceFactor !== 0)\n\n  return { significantIndicatorColumns }\n}\n\nfunction groupColumnsByDimension(columns) {\n  const groupedBy = _.groupBy(columns, ({ colName }) => {\n    const col = indicatorColnames[colName]\n    return col?.dimension\n  })\n  return groupedBy\n}\n\nfunction useTypologyPlotData({\n  width,\n  significantIndicatorColumns,\n  gridItems,\n  gridItem,\n}) {\n  const enabledHabitats = useSelector(\n    (state) => state.globalSettings.enabledHabitats\n  )\n  const habitatPresence = {\n    mg: gridItem.mang_presence === 1,\n    sm: gridItem.salt_presence === 1,\n    sg: gridItem.seag_presence === 1,\n  }\n\n  const filteredColumns = significantIndicatorColumns.filter(({ colName }) => {\n    const habitatKey = getColumnHabitat(colName)\n    const habitatEnabled = enabledHabitats.includes(habitatKey)\n\n    const hasHabitatPresence = habitatPresence[habitatKey]\n    return habitatEnabled && hasHabitatPresence\n  })\n  const columnsByDimension = groupColumnsByDimension(filteredColumns)\n  const groupedPlots = _.chain(columnsByDimension)\n    .map((indicatorColumns, dimension) => {\n      const boxplots = indicatorColumns.reverse().map(({ colName }) => {\n        const color = getColumnColor(colName)\n        // Accessing residuals data\n        const x = gridItems.map((item) => item.residuals[colName])\n        const displayName = getColumnDisplayName(colName)\n        const boxplot = {\n          type: 'violin',\n          x,\n          name: displayName,\n          showlegend: false,\n          // whiskerwidth: 0.2,\n          // boxpoints: 'all',\n          marker: { color, size: 3 },\n          line: {\n            width: 1,\n          },\n        }\n        return boxplot\n      })\n\n      const currentGridItemMarkers = indicatorColumns.map(({ colName }) => {\n        const displayName = getColumnDisplayName(colName)\n        const name = `Cell ${displayName}`\n        const y = [displayName]\n        const x = [gridItem.residuals[colName]]\n        const marker = {\n          x,\n          y,\n          name,\n          // text: 'Some really interesting hover info',\n          showlegend: false,\n          marker: selectedCellMarker,\n        }\n        return marker\n      })\n\n      const currentGridItemLegendTrace = {\n        // Dummy trace to create legend item\n        x: [null],\n        y: [null],\n        name: 'Selected Cell',\n        marker: selectedCellMarker,\n      }\n\n      const rowHeight = 40\n      const height = indicatorColumns.length * rowHeight\n\n      const calculatedLayout = {\n        ...layout,\n        width,\n        height,\n      }\n\n      return {\n        data: [\n          ...boxplots,\n          ...currentGridItemMarkers,\n          currentGridItemLegendTrace,\n        ],\n        layout: calculatedLayout,\n        dimension,\n      }\n    })\n    .sortBy('dimension')\n    .value()\n\n  return {\n    groupedPlots,\n  }\n}\n\nexport function TypologyBoxPlot({ gridItems, gridItem, quantileValue = 0.8 }) {\n  const [containerRef, { width }] = useMeasure()\n\n  const { significantIndicatorColumns } = filterSignificantData({\n    quantileValue,\n    gridItems,\n  })\n\n  const { groupedPlots } = useTypologyPlotData({\n    significantIndicatorColumns,\n    width,\n    gridItems,\n    gridItem,\n  })\n\n  return (\n    <div ref={containerRef} style={{ width: '100%' }}>\n      {!groupedPlots.length && (\n        <div className=\"notification is-warning is-light\">\n          No indicators of significance\n        </div>\n      )}\n      {!!groupedPlots.length &&\n        groupedPlots.map(({ data, layout, dimension }, index) => {\n          return (\n            <div key={`groupedPlot${dimension}`} className=\"block\">\n              <h6 className=\"title is-6 mb-0 is-underlined\">{dimension}</h6>\n              <Plot data={data} layout={layout} config={config} />\n            </div>\n          )\n        })}\n    </div>\n  )\n}\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { SliderInput } from '../../common/SliderInput'\nimport { setTypologyBoxPlotQuantile } from '../../redux/globalSettingsSlice'\nimport { formatCoordinate } from '../../utils/mapUtils'\nimport { TypologyBoxPlot } from './charts/TypologyBoxPlot'\n\nexport function GridItemWidget({\n  selectedGridItemData,\n  gridItems,\n  clusters,\n  gridItemsPerCluster,\n}) {\n  const typologyBoxPlotQuantile = useSelector(\n    (state) => state.globalSettings.typologyBoxPlotQuantile\n  )\n\n  const gridItem = selectedGridItemData?.[0]\n\n  const { TERRITORY1, ID, clusterNumber, color, fillColor, centerCoords } =\n    gridItem\n\n  const cluster = clusters.find(({ n }) => n === clusterNumber)\n\n  return (\n    <div className=\"Widgets--Box--Inner\">\n      <div className=\"content\">\n        <h3>{TERRITORY1}</h3>\n        <h6 className=\"tag\">{formatCoordinate(centerCoords)}</h6>\n\n        <div className=\"field is-grouped is-grouped-multiline\">\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag\">ID</span>\n              <span className=\"tag is-light has-text-weight-bold\">{ID}</span>\n            </div>\n          </div>\n\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag\">Typology</span>\n              <span\n                className=\"tag\"\n                style={{\n                  backgroundColor: fillColor,\n                  border: `1px solid ${color}`,\n                  fontWeight: 600,\n                }}\n              >\n                {clusterNumber}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"block\">\n          <TypologyBoxPlotQuantileInput />\n        </div>\n\n        <TypologyBoxPlot\n          cluster={cluster}\n          gridItems={gridItemsPerCluster[clusterNumber]}\n          gridItem={gridItem}\n          quantileValue={typologyBoxPlotQuantile}\n        />\n      </div>\n    </div>\n  )\n}\n\nfunction TypologyBoxPlotQuantileInput() {\n  const dispatch = useDispatch()\n  const typologyBoxPlotQuantile = useSelector(\n    (state) => state.globalSettings.typologyBoxPlotQuantile\n  )\n  return (\n    <fieldset className=\"field\" style={{ maxWidth: 300 }}>\n      <label className=\"label\" style={{ marginBottom: 18 }}>\n        Quantile for Typology Boxplot:{' '}\n        <span className=\"tag\">{typologyBoxPlotQuantile}</span>\n      </label>\n      <div className=\"control\">\n        <SliderInput\n          min={0}\n          max={0.99}\n          step={0.05}\n          value={typologyBoxPlotQuantile}\n          onChange={(value) => {\n            dispatch(setTypologyBoxPlotQuantile(value))\n          }}\n          aria-label=\"Number of Clusters\"\n        />\n      </div>\n    </fieldset>\n  )\n}\n","import './MapLegend.css'\n\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n  setNumberOfClusters,\n  toggleEnabledHabitat,\n} from '../../redux/globalSettingsSlice'\n\nexport function MapLegend({ clusters }) {\n  const dispatch = useDispatch()\n  const numberOfClusters = useSelector(\n    (state) => state.globalSettings.numberOfClusters\n  )\n\n  const enabledHabitats = useSelector(\n    (state) => state.globalSettings.enabledHabitats\n  )\n\n  function HabitatCheckbox({ title, name }) {\n    function toggleHabitat(e) {\n      const habitat = e.target.name\n      dispatch(toggleEnabledHabitat(habitat))\n    }\n\n    return (\n      <div className=\"control\">\n        <label className=\"checkbox\">\n          <input\n            type=\"checkbox\"\n            name={name}\n            onChange={toggleHabitat}\n            checked={enabledHabitats.includes(name)}\n          />\n          {title}\n        </label>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"MapLegend\">\n      <fieldset className=\"field\" style={{ maxWidth: 330 }}>\n        <label className=\"label\">Number of Typologies</label>\n\n        <div className=\"control\">\n          <label className=\"radio\">\n            <input\n              type=\"radio\"\n              name=\"number_typologies\"\n              checked={numberOfClusters === 5}\n              aria-label={`Number of typologies: ${5}`}\n              onChange={() => {\n                dispatch(setNumberOfClusters(5))\n              }}\n            />\n            5\n          </label>\n          <label className=\"radio\">\n            <input\n              type=\"radio\"\n              name=\"number_typologies\"\n              checked={numberOfClusters === 18}\n              aria-label={`Number of typologies: ${18}`}\n              onChange={() => {\n                dispatch(setNumberOfClusters(18))\n              }}\n            />\n            18\n          </label>\n        </div>\n      </fieldset>\n\n      <div className=\"MapLegend--Display block\">\n        {clusters.map((cluster) => {\n          return (\n            <div\n              className=\"MapLegend--ColourStop\"\n              key={`ColourStop-${cluster.n}`}\n            >\n              <div\n                className=\"MapLegend--ColourBox\"\n                style={{\n                  borderColor: cluster.color,\n                  backgroundColor: cluster.fillColor,\n                }}\n              >\n                <span className=\"MapLegend--Value\">{cluster.n}</span>\n              </div>\n            </div>\n          )\n        })}\n      </div>\n\n      <fieldset className=\"field\">\n        <label className=\"label\">Habitats</label>\n        <HabitatCheckbox title=\"Mangroves\" name=\"mg\" />\n        <HabitatCheckbox title=\"Saltmarsh\" name=\"sm\" />\n        <HabitatCheckbox title=\"Seagrass\" name=\"sg\" />\n      </fieldset>\n    </div>\n  )\n}\n","export function IconButton({ Icon, onClick, ...props }) {\n  const handleKeyDown = (e) => {\n    if (e.code === 'Space' || e.code === 'Enter') {\n      onClick(e)\n    }\n  }\n  return (\n    <Icon\n      role=\"button\"\n      onClick={onClick}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}\n      aria-pressed=\"false\"\n      {...props}\n    />\n  )\n}\n","import './Popup.css'\n\nimport { X as CloseIcon } from 'react-feather'\nimport Modal from 'react-modal'\n\nimport { IconButton } from './IconButton'\n\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\nModal.setAppElement(`body`)\n\nexport function Popup({ title, modalIsOpen, setModalIsOpen, children }) {\n  function afterOpenModal() {}\n\n  function closeModal() {\n    setModalIsOpen(false)\n  }\n\n  return (\n    <Modal\n      isOpen={modalIsOpen}\n      onAfterOpen={afterOpenModal}\n      onRequestClose={closeModal}\n      className=\"Popup--Modal\"\n      overlayClassName=\"Popup--Overlay\"\n    >\n      <div className=\"Popup--Modal--Inner\">\n        {title && <h3 className=\"Popup--Title\">{title}</h3>}\n        <div className=\"Popup--Content\">{children}</div>\n      </div>\n      <IconButton\n        Icon={CloseIcon}\n        className=\"Popup--CloseButton\"\n        onClick={closeModal}\n      />\n    </Modal>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/fig1.f2937d0d.png\";","import './Menu.css'\n\nimport { Fragment, useState } from 'react'\n\nimport { IconButton } from '../../common/IconButton'\nimport { Popup } from '../../common/Popup'\nimport fig1 from '../../images/fig1.png'\n\nconst MenuPopupContent = () => (\n  <div>\n    <figure style={{ width: '100%', maxWidth: 550 }}>\n      <img src={fig1} alt=\"Figure 1\" width={1488} height={1334} />\n      <figcaption>\n        Figure 1: Flow diagram of the nine key methodological steps used to map\n        and diagnose spatially explicit typologies of coastal wetland ecosystem\n        condition applicable at a global scale.\n      </figcaption>\n    </figure>\n  </div>\n)\n\nconst MenuIcon = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"11.5\"></circle>\n      <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path>\n      <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\n    </svg>\n  )\n}\n\nexport function Menu() {\n  const [menuIsOpen, setMenuIsOpen] = useState(false)\n  const showMenuHelpText = true\n\n  const menuPopupTitle = 'Glowdex App'\n\n  const openMenu = () => {\n    setMenuIsOpen(true)\n  }\n\n  return (\n    <Fragment>\n      <div className=\"Menu--MenuButtonWrap\" data-hashelptext={showMenuHelpText}>\n        <IconButton\n          Icon={MenuIcon}\n          onClick={openMenu}\n          className=\"Menu--MenuButton\"\n          title=\"Open Menu\"\n          tabIndex={1}\n        />\n        <div className=\"Menu--HelpText\">\n          Click on a grid cell to get started\n        </div>\n      </div>\n      <Popup\n        title={menuPopupTitle}\n        modalIsOpen={menuIsOpen}\n        setModalIsOpen={setMenuIsOpen}\n      >\n        <MenuPopupContent />\n      </Popup>\n    </Fragment>\n  )\n}\n","export function WidgetBox({ children, onClose, ...props }) {\n  return (\n    <div className=\"Widgets--Box\" {...props}>\n      {children}\n    </div>\n  )\n}\n","import './Widgets.css'\n\nimport { useSelectedGridItemData } from '../../utils/dataHooks'\nimport { GridItemWidget } from './GridItemWidget'\nimport { MapLegend } from './MapLegend'\nimport { Menu } from './Menu'\nimport { WidgetBox } from './WidgetBox'\n\nexport function Widgets({\n  mapFeatures,\n  gridItems,\n  clusters,\n  isLoading,\n  gridItemsPerCluster,\n}) {\n  const { selectedGridItemData } = useSelectedGridItemData({\n    mapFeatures,\n    gridItems,\n  })\n\n  return (\n    <div className=\"Widgets--Wrap\">\n      <Menu />\n\n      {!isLoading && (\n        <WidgetBox>\n          <MapLegend clusters={clusters} />\n        </WidgetBox>\n      )}\n\n      {!!selectedGridItemData?.length && (\n        <WidgetBox>\n          <GridItemWidget\n            selectedGridItemData={selectedGridItemData}\n            clusters={clusters}\n            gridItemsPerCluster={gridItemsPerCluster}\n            gridItems={gridItems}\n          />\n        </WidgetBox>\n      )}\n    </div>\n  )\n}\n","import ReactSplit, { SplitDirection } from '@devbookhq/splitter'\n\nimport { Map } from '../features/map/Map'\nimport { Widgets } from '../features/widgets/Widgets'\nimport { useMapData } from '../utils/dataHooks'\nimport styles from './App.module.css'\n\nconst initialPanelSizes = [40, 60]\n\nexport function App() {\n  const { mapFeatures, gridItems, clusters, gridItemsPerCluster, isLoading } =\n    useMapData()\n  return (\n    <main className={styles.main}>\n      <ReactSplit\n        direction={SplitDirection.Horizontal}\n        initialSizes={initialPanelSizes}\n        minWidth={300}\n        gutterClassName={styles.ReactSplitGutterHorizontal}\n        draggerClassName={styles.ReactSplitDraggerHorizontal}\n      >\n        <Widgets\n          mapFeatures={mapFeatures}\n          gridItems={gridItems}\n          clusters={clusters}\n          isLoading={isLoading}\n          gridItemsPerCluster={gridItemsPerCluster}\n        />\n        <Map\n          mapFeatures={mapFeatures}\n          gridItems={gridItems}\n          clusters={clusters}\n          isLoading={isLoading}\n        />\n      </ReactSplit>\n    </main>\n  )\n}\n","import {\n  FLUSH,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n  REHYDRATE,\n  persistReducer,\n  persistStore,\n} from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nimport {\n  combineReducers,\n  configureStore,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit'\n\nimport globalSettingsSlice from './globalSettingsSlice'\n\nconst createPersistedReducer = ({ key, reducer, config = {} }) => {\n  const persistConfig = {\n    key,\n    storage,\n    ...config,\n  }\n\n  const persistedReducer = persistReducer(persistConfig, reducer)\n  return persistedReducer\n}\n\nconst rootReducer = combineReducers({\n  globalSettings: createPersistedReducer({\n    reducer: globalSettingsSlice,\n    key: 'globalSettings',\n    whitelist: [\n      'numberOfClusters',\n      'typologyBoxPlotQuantile',\n      'enabledHabitats',\n    ],\n  }),\n})\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n})\nexport const persistor = persistStore(store)\n","import 'modern-normalize/modern-normalize.css'\nimport 'bulma/css/bulma.css'\n\nimport './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport { App } from './app/App'\nimport { persistor, store } from './redux/store'\n\nconst appElementID = 'root'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(appElementID)\n)\n"],"sourceRoot":""}