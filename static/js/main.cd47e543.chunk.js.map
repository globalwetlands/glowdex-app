{"version":3,"sources":["common/Spinner.module.css","app/App.module.css","common/SliderInput.module.css","common/Spinner.js","redux/gridItemsSlice.js","utils/mapUtils.js","features/map/mapStyles.js","features/map/Map.js","utils/utils.js","utils/colorUtils.js","utils/dataUtils.js","utils/dataHooks.js","common/SliderInput.js","redux/globalSettingsSlice.js","features/widgets/charts/TypologyBoxPlot.js","features/widgets/GridItemWidget.js","features/widgets/MapLegend.js","common/IconButton.js","common/Popup.js","images/fig1.png","features/widgets/Menu.js","features/widgets/WidgetBox.js","features/widgets/Widgets.js","app/App.js","redux/store.js","index.js"],"names":["module","exports","Spinner","isSmall","props","size","className","styles","spinner","width","height","viewBox","xmlns","pathSmall","path","fill","strokeWidth","strokeLinecap","cx","cy","r","gridItemsSlice","createSlice","name","initialState","selectedGridItems","reducers","setSelectedGridItems","state","action","payload","actions","getBboxCenter","minLng","minLat","maxLng","maxLat","latitude","longitude","formatCoordinate","formatcoords","format","decimalPlaces","gridLayerStyle","id","type","paint","gridLayerHoverStyle","gridLayerSelectedStyle","Map","mapFeatures","gridItems","clusters","isLoading","mapRef","useRef","dispatch","useDispatch","useSelector","viewport","setViewport","useState","zoom","minZoom","hoveredFeature","setHoveredFeature","fitBounds","useCallback","async","feature","duration","bbox","updatedViewport","transitionDuration","transitionInterpolator","FlyToInterpolator","ms","Promise","resolve","setTimeout","delay","hoveredFeatureFilter","useMemo","properties","ID","selectedFeatureFilter","mapStyle","onViewportChange","mapboxApiAccessToken","process","onHover","e","features","srcEvent","offsetX","offsetY","find","f","layer","x","y","onMouseOut","onClick","clickedFeature","ref","getCursor","isHovering","isDragging","data","filter","clusterNumber","gridItem","item","parseInt","cluster","n","style","left","top","TERRITORY1","backgroundColor","fillColor","border","color","fontWeight","renderTooltip","position","getBrewerColors","scaleName","alpha","scale","chroma","brewer","map","css","opacify","fetcher","args","fetch","then","res","json","fetcherCsv","text","csvString","Papa","parse","header","dynamicTyping","parseCsv","indicatorColnames","_","chain","indicatorLabels","indicatorRow","habitatLabel","habitat","keyBy","value","indicatorColnamesKeys","Object","keys","useMapData","numberOfClusters","globalSettings","gridGeojson","useSWR","allClusters","gridItemData","gridItemResidualsData","residuals","colors","fillColors","range","length","generateClusters","clusterItems","console","time","groupedByClusterN","groupBy","Cluster","nclust","getClusterItems","timeEnd","isEmpty","matchingClusterItem","generateMapFeatures","clusterNumbers","generateGridLayerStyle","gridItemsPerCluster","SliderInput","onChange","debounceMs","val","setVal","useDebounce","globalSettingsSlice","showMenuHelpText","typologyBoxPlotQuantile","hideMenuHelpText","setNumberOfClusters","setTypologyBoxPlotQuantile","Plot","createPlotlyComponent","Plotly","config","displayModeBar","layout","plot_bgcolor","paper_bgcolor","showlegend","legend","hovermode","margin","l","t","b","xaxis","showticklabels","zeroline","mirror","tickmode","yaxis","tickfont","boxgap","getSignificanceFactorColor","significanceFactor","getColumnDisplayName","colName","label","selectedCellMarker","symbol","line","TypologyBoxPlot","quantileValue","containerRef","useMeasure","significantIndicatorColumns","columns","columnSignificance","accessor","upper","quantile","lower","Math","sign","index","filterSignificantData","boxplots","marker","currentGridItemMarkers","displayName","currentGridItemLegendTrace","calculatedLayout","GridItemWidget","selectedGridItemData","centerCoords","TypologyBoxPlotQuantileInput","maxWidth","marginBottom","min","max","step","MapLegend","borderColor","IconButton","Icon","role","onKeyDown","code","tabIndex","Popup","title","modalIsOpen","setModalIsOpen","children","closeModal","isOpen","onAfterOpen","onRequestClose","overlayClassName","CloseIcon","Modal","setAppElement","MenuPopupContent","src","fig1","alt","MenuIcon","stroke","strokeLinejoin","d","x1","y1","x2","y2","Menu","menuIsOpen","setMenuIsOpen","WidgetBox","onClose","Widgets","selectedID","mapFeature","useSelectedGridItemData","initialPanelSizes","App","main","direction","SplitDirection","Horizontal","initialSizes","minWidth","gutterClassName","ReactSplitGutterHorizontal","draggerClassName","ReactSplitDraggerHorizontal","rootReducer","combineReducers","key","reducer","persistConfig","storage","persistReducer","createPersistedReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.cd47e543.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__1QSjx\",\"rotator\":\"Spinner_rotator__ldWJL\",\"path\":\"Spinner_path__B6xE1\",\"dash\":\"Spinner_dash__3VCIb\",\"colors\":\"Spinner_colors__3EM4d\",\"pathSmall\":\"Spinner_pathSmall__1zioJ\",\"dashSmall\":\"Spinner_dashSmall__2ti9Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__3cTDB\",\"ReactSplitGutterHorizontal\":\"App_ReactSplitGutterHorizontal__15IR8\",\"ReactSplitDraggerHorizontal\":\"App_ReactSplitDraggerHorizontal__2flWb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SliderInput\":\"SliderInput_SliderInput__2uRuk\"};","import styles from './Spinner.module.css'\n\nexport function Spinner({ isSmall = false, ...props }) {\n  const size = isSmall ? 25 : 66\n  return (\n    <svg\n      className={styles.spinner}\n      data-testid=\"spinner\"\n      width={size}\n      height={size}\n      viewBox={`0 0 ${size} ${size}`}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <circle\n        className={isSmall ? styles.pathSmall : styles.path}\n        fill=\"none\"\n        strokeWidth={size / 10}\n        strokeLinecap=\"round\"\n        cx={size / 2}\n        cy={size / 2}\n        r={size / 2 - 3}\n      />\n    </svg>\n  )\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  selectedGridItems: [],\n}\n\nconst gridItemsSlice = createSlice({\n  name: 'gridItems',\n  initialState,\n  reducers: {\n    setSelectedGridItems: (state, action) => {\n      state.selectedGridItems = action.payload\n    },\n  },\n})\n\nexport const { setSelectedGridItems } = gridItemsSlice.actions\n\nexport default gridItemsSlice.reducer\n","import formatcoords from 'formatcoords'\n\nexport function getBboxCenter({ minLng, minLat, maxLng, maxLat }) {\n  const centerLat = (minLat + maxLat) / 2\n  const centerLng = (minLng + maxLng) / 2\n  return { latitude: centerLat, longitude: centerLng }\n}\n\nexport function formatCoordinate({ latitude, longitude }) {\n  return formatcoords(latitude, longitude).format('FFf', { decimalPlaces: 1 })\n}\n","export const gridLayerStyle = {\n  id: 'gridItems',\n  type: 'fill',\n  paint: {\n    'fill-opacity': 1,\n    'fill-outline-color': ['get', 'color'],\n    'fill-color': ['get', 'fillColor'],\n  },\n}\n\nexport const gridLayerHoverStyle = {\n  id: 'gridItemsHighlighted',\n  type: 'fill',\n  paint: {\n    'fill-opacity': 1,\n    'fill-outline-color': ['get', 'color'],\n    'fill-color': ['get', 'color'],\n  },\n}\n\nexport const gridLayerSelectedStyle = {\n  id: 'gridItemsSelected',\n  type: 'fill',\n  paint: {\n    'fill-opacity': 1,\n    'fill-outline-color': ['get', 'color'],\n    'fill-color': ['get', 'color'],\n  },\n}\n","import './Map.css'\n\nimport { useCallback, useMemo, useRef, useState } from 'react'\nimport {\n  FlyToInterpolator,\n  Layer,\n  InteractiveMap as MapGL,\n  NavigationControl,\n  Source,\n} from 'react-map-gl'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport bbox from '@turf/bbox'\n\nimport { Spinner } from '../../common/Spinner'\nimport { setSelectedGridItems } from '../../redux/gridItemsSlice'\nimport { getBboxCenter } from '../../utils/mapUtils'\nimport { delay } from '../../utils/utils'\nimport {\n  gridLayerHoverStyle,\n  gridLayerSelectedStyle,\n  gridLayerStyle,\n} from './mapStyles'\n\nexport function Map({ mapFeatures, gridItems, clusters, isLoading }) {\n  const mapboxApiAccessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN\n  const mapStyle =\n    'mapbox://styles/ejinks-gu/ckhycntp61ol31am7qum156sk?optimize=true'\n  const mapRef = useRef()\n\n  const dispatch = useDispatch()\n  const selectedGridItems = useSelector(\n    (state) => state.gridItems.selectedGridItems\n  )\n\n  const [viewport, setViewport] = useState({\n    // width: 400,\n    // height: 400,\n    latitude: 20,\n    longitude: 0,\n    zoom: 2,\n    minZoom: 2,\n  })\n\n  const [hoveredFeature, setHoveredFeature] = useState({})\n\n  const fitBounds = useCallback(\n    async (feature, duration = 250) => {\n      // calculate the bounding box of the feature\n      const [minLng, minLat, maxLng, maxLat] = bbox(feature)\n      const { longitude, latitude } = getBboxCenter({\n        minLng,\n        minLat,\n        maxLng,\n        maxLat,\n      })\n\n      const zoom = 5\n\n      const updatedViewport = {\n        ...viewport,\n        longitude,\n        latitude,\n        zoom,\n        transitionDuration: duration,\n        transitionInterpolator: new FlyToInterpolator(),\n        // transitionEasing: d3.easeCubic,\n      }\n      setViewport(updatedViewport)\n      await delay(duration + 50)\n      return\n    },\n    [viewport]\n  )\n\n  const onHover = (e) => {\n    const {\n      features,\n      srcEvent: { offsetX, offsetY },\n    } = e\n    const hoveredFeature =\n      features && features.find((f) => f.layer.id === gridLayerStyle.id)\n\n    setHoveredFeature({\n      feature: hoveredFeature,\n      x: offsetX,\n      y: offsetY,\n    })\n  }\n\n  const onMouseOut = () => {\n    setHoveredFeature({})\n  }\n\n  const onClick = async (e) => {\n    const { features } = e\n    const clickedFeature =\n      features && features.find((f) => f.layer.id === gridLayerStyle.id)\n    if (clickedFeature) {\n      const { ID } = clickedFeature.properties\n      await fitBounds(clickedFeature)\n      dispatch(setSelectedGridItems([ID]))\n    }\n  }\n\n  const renderTooltip = () => {\n    const { feature, x, y } = hoveredFeature\n\n    if (!feature) {\n      return null\n    }\n\n    const id = feature.properties?.ID\n    const clusterNumber = feature.properties?.clusterNumber\n\n    const gridItem = gridItems.find((item) => parseInt(item.ID) === id)\n\n    const cluster = clusters.find(({ n }) => n === clusterNumber)\n\n    return (\n      feature && (\n        <div className=\"Map--Tooltip\" style={{ left: x, top: y }}>\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag\">ID</span>\n              <span className=\"tag has-text-weight-bold\">{gridItem?.ID}</span>\n            </div>\n          </div>\n\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag\">Country</span>\n              <span className=\"tag has-text-weight-bold\">\n                {gridItem?.TERRITORY1}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag\">Typology</span>\n              <span\n                className=\"tag\"\n                style={{\n                  backgroundColor: cluster.fillColor,\n                  border: `1px solid ${cluster.color}`,\n                  fontWeight: 600,\n                }}\n              >\n                {clusterNumber}\n              </span>\n            </div>\n          </div>\n        </div>\n      )\n    )\n  }\n\n  const getCursor = (e) => {\n    if (e.isHovering) {\n      return 'pointer'\n    }\n    if (e?.isDragging) {\n      return 'grabbing'\n    }\n    if (hoveredFeature?.feature) {\n      return 'crosshair'\n    }\n    return 'grab'\n  }\n\n  const hoveredFeatureFilter = useMemo(() => {\n    // A filter that matches the hovered feature by ID\n    return ['==', 'ID', hoveredFeature?.feature?.properties?.ID || false]\n  }, [hoveredFeature])\n\n  const selectedFeatureFilter = useMemo(() => {\n    // A filter that matches the selected features by ID\n    return ['in', ['get', 'ID'], ['literal', selectedGridItems]]\n  }, [selectedGridItems])\n\n  return (\n    <div className=\"Map\" data-testid=\"Map\">\n      <MapGL\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle={mapStyle}\n        onViewportChange={setViewport}\n        mapboxApiAccessToken={mapboxApiAccessToken}\n        onHover={onHover}\n        onMouseOut={onMouseOut}\n        onClick={onClick}\n        ref={mapRef}\n        getCursor={getCursor}\n      >\n        <NavigationControl\n          className=\"Map--NavigationControl\"\n          onViewportChange={setViewport}\n        />\n\n        {!isLoading && (\n          <Source\n            type=\"geojson\"\n            data={{ type: 'FeatureCollection', features: mapFeatures }}\n          >\n            <Layer {...gridLayerStyle} />\n            <Layer {...gridLayerHoverStyle} filter={hoveredFeatureFilter} />\n            <Layer {...gridLayerSelectedStyle} filter={selectedFeatureFilter} />\n          </Source>\n        )}\n\n        {renderTooltip()}\n      </MapGL>\n\n      {isLoading && (\n        <Spinner\n          style={{\n            position: 'absolute',\n            top: 'calc(50% - 33px)',\n            left: 'calc(50% - 33px)',\n          }}\n        />\n      )}\n    </div>\n  )\n}\n","export async function delay(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n","import chroma from 'chroma-js'\n\nexport function getBrewerColors({ scaleName = 'Set2', alpha = 1 } = {}) {\n  let scale = chroma.brewer?.[scaleName]\n\n  if (alpha < 1) {\n    scale = scale.map((color) => opacify({ color, alpha }))\n  }\n\n  return scale\n}\n\nexport function opacify({ color, alpha }) {\n  return chroma(color).alpha(alpha).css()\n}\n","import _ from 'lodash'\nimport Papa from 'papaparse'\n\nimport indicatorLabels from './indicator-labels.json'\n\nexport const fetcher = (...args) => fetch(...args).then((res) => res.json())\nexport const fetcherCsv = (...args) =>\n  fetch(...args)\n    .then((res) => res.text())\n    .then((csvString) => parseCsv({ csvString }))\n\nexport const loadGeojson = async ({\n  name = 'grid', // country, aoi, wdpa\n}) => {\n  const dataUrl = `${process.env.PUBLIC_URL}/geojson/${name}.json`\n  console.log('Loading geojson data', dataUrl)\n  // await delay(1000)\n  const data = await fetch(dataUrl).then((res) => res.json())\n  return data\n}\n\nexport const loadSingleLocationData = async (locationID) => {\n  console.log(`Loading location ${locationID} data`)\n  const dataUrl = `${process.env.PUBLIC_URL}/locations_data/${locationID}.json`\n  const data = fetch(dataUrl).then((res) => res.json())\n  // await delay(1000)\n  return data\n}\n\nexport async function parseCsv({ csvString }) {\n  const { data } = Papa.parse(csvString, { header: true, dynamicTyping: true })\n  return data\n}\n\nfunction mapHabitatLabel(indicatorRow) {\n  let habitatLabel = ''\n  switch (indicatorRow.habitat) {\n    case 'sg':\n      habitatLabel = 'Seagrass'\n      break\n    case 'mg':\n      habitatLabel = 'Mangrove'\n      break\n    case 'sm':\n      habitatLabel = 'Saltmarsh'\n      break\n    default:\n      habitatLabel = ''\n  }\n  return { ...indicatorRow, habitatLabel }\n}\nexport const indicatorColnames = _.chain(indicatorLabels)\n  .map(mapHabitatLabel)\n  .keyBy('indicator')\n  .value()\n\nexport const indicatorColnamesKeys = Object.keys(indicatorColnames)\n","import _ from 'lodash'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport useSWR from 'swr'\n\nimport bbox from '@turf/bbox'\n\nimport { getBrewerColors } from './colorUtils'\nimport { fetcher, fetcherCsv } from './dataUtils'\nimport { getBboxCenter } from './mapUtils'\n\nexport function generateGridLayerStyle({ clusters }) {\n  const colors = clusters.map((cluster) => cluster.color)\n  const fillColors = clusters.map((cluster) => cluster.fillColor)\n  const clusterNumbers = clusters.map((cluster) => cluster.n)\n  return {\n    id: `gridItems`,\n    type: 'fill',\n    paint: {\n      'fill-opacity': 1,\n      // TODO: Add hover state\n      'fill-outline-color': [\n        'to-color',\n        [\n          'at',\n          ['index-of', ['get', 'clusterNumber'], ['literal', clusterNumbers]],\n          ['literal', colors],\n        ],\n      ],\n      'fill-color': [\n        'to-color',\n        [\n          'at',\n          ['index-of', ['get', 'clusterNumber'], ['literal', clusterNumbers]],\n          ['literal', fillColors],\n        ],\n      ],\n    },\n  }\n}\n\nfunction getClusterItems({ numberOfClusters, allClusters }) {\n  // change cluster data types to Integers\n  const groupedByClusterN = _.groupBy(allClusters, 'nclust')\n  const clusterItems = groupedByClusterN?.[numberOfClusters]?.map(\n    ({ ID, Cluster, nclust }) => ({\n      ID: parseInt(ID),\n      cluster: parseInt(Cluster),\n      nclust: parseInt(nclust),\n    })\n  )\n\n  const clusterItemsObj = _.keyBy(clusterItems, 'ID')\n\n  return clusterItemsObj\n}\n\nfunction generateMapFeatures({ mapFeatures, clusterItems, clusters }) {\n  function addFeatureProps(feature) {\n    // Add cluster item props to feature\n    const matchingClusterItem = clusterItems?.[feature.properties.ID]\n    const cluster = clusters.find(({ n }) => n === matchingClusterItem?.cluster)\n\n    const { color, fillColor, n } = cluster\n\n    return {\n      ...feature,\n      properties: {\n        ...feature.properties,\n        clusterNumber: n,\n        color,\n        fillColor,\n        value: n,\n      },\n    }\n  }\n\n  return mapFeatures.map(addFeatureProps)\n}\n\nfunction generateClusters({ numberOfClusters }) {\n  const colors = getBrewerColors()\n  const fillColors = getBrewerColors({ alpha: 0.4 })\n\n  const clusters = _.range(1, numberOfClusters + 1).map((n) => {\n    const color = colors[(n - 1) % colors.length]\n    const fillColor = fillColors[(n - 1) % colors.length]\n    return { n, color, fillColor }\n  })\n\n  return clusters\n}\n\nexport function useMapData() {\n  const numberOfClusters = useSelector(\n    (state) => state.globalSettings.numberOfClusters\n  )\n  const { data: gridGeojson } = useSWR(\n    `${process.env.PUBLIC_URL}/data/grid.geojson`,\n    fetcher\n  )\n  const { data: allClusters } = useSWR(\n    `${process.env.PUBLIC_URL}/data/all-clusters.csv`,\n    fetcherCsv\n  )\n  const { data: gridItemData } = useSWR(\n    `${process.env.PUBLIC_URL}/data/grid-items.csv`,\n    fetcherCsv\n  )\n  const { data: gridItemResidualsData } = useSWR(\n    `${process.env.PUBLIC_URL}/data/grid-items-residuals.csv`,\n    fetcherCsv\n  )\n\n  const gridItems = useMemo(() => {\n    if (gridItemData && gridItemResidualsData) {\n      return gridItemData.map((gridItem) => {\n        const residuals = gridItemResidualsData.find(\n          ({ ID }) => ID === gridItem.ID\n        )\n        return {\n          ...gridItem,\n          residuals,\n        }\n      })\n    } else {\n      return []\n    }\n  }, [gridItemData, gridItemResidualsData])\n\n  const isLoading = useMemo(\n    () => !gridGeojson || !allClusters,\n    [allClusters, gridGeojson]\n  )\n\n  const clusters = useMemo(\n    () => generateClusters({ numberOfClusters }),\n    [numberOfClusters]\n  )\n\n  const clusterItems = useMemo(() => {\n    if (allClusters?.length) {\n      console.time('getClusterItems')\n      const clusterItems = getClusterItems({\n        numberOfClusters,\n        allClusters,\n      })\n      console.timeEnd('getClusterItems')\n      return clusterItems\n    }\n  }, [allClusters, numberOfClusters])\n\n  const mapFeatures = useMemo(() => {\n    if (gridGeojson?.features && !_.isEmpty(clusterItems)) {\n      console.time('generateMapFeatures')\n\n      const mapFeatures = generateMapFeatures({\n        clusterItems,\n        clusters,\n        mapFeatures: gridGeojson?.features,\n      })\n\n      console.timeEnd('generateMapFeatures')\n      return mapFeatures\n    } else {\n      return []\n    }\n  }, [clusterItems, clusters, gridGeojson?.features])\n\n  const gridLayerStyle = useMemo(() => {\n    const gridLayerStyle = generateGridLayerStyle({\n      clusters,\n    })\n    return gridLayerStyle\n  }, [clusters])\n\n  const gridItemsPerCluster = useMemo(() => {\n    if (gridItems && clusterItems) {\n      console.time('gridItemsPerCluster')\n      const gridItemsPerCluster = _.groupBy(gridItems, ({ ID }) => {\n        return clusterItems?.[parseInt(ID)]?.cluster\n      })\n      console.timeEnd('gridItemsPerCluster')\n      return gridItemsPerCluster\n    } else {\n      return undefined\n    }\n  }, [clusterItems, gridItems])\n\n  return {\n    mapFeatures,\n    allClusters,\n    clusters,\n    clusterItems,\n    gridItems,\n    isLoading,\n    gridLayerStyle,\n    gridItemsPerCluster,\n  }\n}\n\nexport function useSelectedGridItemData({ gridItems, mapFeatures }) {\n  // Returns the selected grid item data\n\n  const selectedGridItems = useSelector(\n    (state) => state.gridItems.selectedGridItems\n  )\n\n  const selectedGridItemData = useMemo(() => {\n    if (selectedGridItems?.length && gridItems?.length) {\n      // for each selected ID, get the data for that ID\n      const selectedGridItemsData = selectedGridItems.map((selectedID) => {\n        // Find grid item data by ID\n        const gridItem = gridItems.find(({ ID }) => selectedID === parseInt(ID))\n        // Find map feature props by ID\n        const mapFeature =\n          mapFeatures.find((feature) => feature.properties.ID === selectedID) ||\n          {}\n        const [minLng, minLat, maxLng, maxLat] = bbox(mapFeature)\n        const centerCoords = getBboxCenter({ minLng, minLat, maxLng, maxLat })\n        const featureProps = mapFeature?.properties || {}\n\n        return { ...gridItem, ...featureProps, centerCoords }\n      })\n      return selectedGridItemsData\n    } else {\n      return []\n    }\n  }, [selectedGridItems, gridItems, mapFeatures])\n  return { selectedGridItemData }\n}\n","import '@reach/slider/styles.css'\n\nimport { useState } from 'react'\nimport { useDebounce } from 'react-use'\n\nimport Slider from '@reach/slider'\n\nimport styles from './SliderInput.module.css'\n\nexport function SliderInput({ value, onChange, debounceMs = 0, ...props }) {\n  const [val, setVal] = useState(value)\n\n  // Debounce onChange handler\n  useDebounce(\n    () => {\n      onChange(val)\n    },\n    debounceMs,\n    [val]\n  )\n\n  return (\n    <Slider\n      className={styles.SliderInput}\n      value={val}\n      onChange={(value) => setVal(value)}\n      {...props}\n    />\n  )\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  showMenuHelpText: true,\n  numberOfClusters: 5,\n  typologyBoxPlotQuantile: 0.8,\n}\n\nconst globalSettingsSlice = createSlice({\n  name: 'globalSettings',\n  initialState,\n  reducers: {\n    hideMenuHelpText: (state) => {\n      state.showMenuHelpText = false\n    },\n    setNumberOfClusters: (state, action) => {\n      state.numberOfClusters = action.payload\n    },\n    setTypologyBoxPlotQuantile: (state, action) => {\n      state.typologyBoxPlotQuantile = action.payload\n    },\n  },\n})\n\nexport const {\n  hideMenuHelpText,\n  setNumberOfClusters,\n  setTypologyBoxPlotQuantile,\n} = globalSettingsSlice.actions\n\nexport default globalSettingsSlice.reducer\n","import { quantile } from 'd3-array'\nimport Plotly from 'plotly.js-cartesian-dist'\nimport { useMemo } from 'react'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { useMeasure } from 'react-use'\n\nimport {\n  indicatorColnames,\n  indicatorColnamesKeys,\n} from '../../../utils/dataUtils'\n\n// Using a smaller precompiled version of plotly.js\n// https://github.com/plotly/react-plotly.js/issues/98#issuecomment-689075526\nconst Plot = createPlotlyComponent(Plotly)\n\nconst config = {\n  displayModeBar: false,\n}\n\nconst layout = {\n  plot_bgcolor: 'transparent',\n  paper_bgcolor: 'transparent',\n  showlegend: false,\n  legend: {\n    x: 0,\n    y: 2,\n  },\n  hovermode: false,\n  margin: {\n    l: 200,\n    r: 0,\n    t: 15,\n    b: 15,\n  },\n  xaxis: {\n    // title: 'Val',\n    showticklabels: 'true',\n    zeroline: true,\n    range: [-4, 4.1],\n    mirror: 'ticks',\n    tickmode: 'linear',\n  },\n  yaxis: {\n    // title: 'Indicator',\n    // tickangle: -90,\n    showticklabels: true,\n    tickfont: {\n      size: 11,\n    },\n  },\n  boxgap: 0.1,\n}\n\nfunction getSignificanceFactorColor(significanceFactor) {\n  return significanceFactor > 0 ? '#00aacc' : '#ff5500'\n}\n\nfunction getColumnDisplayName(colName) {\n  return `${indicatorColnames[colName]?.habitatLabel} ${indicatorColnames[colName]?.label}`\n}\n\nconst selectedCellMarker = {\n  size: 7,\n  symbol: 'diamond',\n  color: '#ffaaff',\n  line: { color: '#cc00ff', width: 1 },\n}\n\nfunction filterSignificantData({\n  quantileValue,\n  gridItems,\n  columns = indicatorColnamesKeys,\n}) {\n  const residuals = gridItems.map((item) => item.residuals)\n  /*\n  R code\n  dat_signif <- dtemp %>%\n    group_by(Indicator, Cluster) %>%\n    summarize(upr = quantile(Val, 0.5 + (input$quant/2), \n                            na.rm = TRUE),\n              lwr = quantile(Val, 0.5 - input$quant/2, \n                            na.rm = TRUE)) %>%\n    mutate(\n          signif = (sign(lwr) == sign(upr))*sign(upr)\n          \n    )\n\n    left_join(dtemp, dat_signif) %>%\n      filter(signif !=0)\n    \n  })\n*/\n  const indicatorColumnSignificance = (colName) => {\n    const accessor = (item) => item[colName]\n    const upper = quantile(residuals, 0.5 + quantileValue / 2, accessor)\n    const lower = quantile(residuals, 0.5 - quantileValue / 2, accessor)\n\n    // TODO: check this significance test\n    const significanceFactor =\n      Math.sign(lower) === Math.sign(upper) ? Math.sign(upper) : 0\n\n    return significanceFactor\n  }\n\n  const columnSignificance = columns.map(indicatorColumnSignificance)\n\n  const significantIndicatorColumns = columns\n    .map((colName, index) => ({\n      colName,\n      significanceFactor: columnSignificance[index],\n    }))\n    .filter(({ significanceFactor }) => significanceFactor !== 0)\n\n  return { significantIndicatorColumns }\n}\n\nexport function TypologyBoxPlot({ gridItems, gridItem, quantileValue = 0.8 }) {\n  const [containerRef, { width }] = useMeasure()\n  const { significantIndicatorColumns } = filterSignificantData({\n    quantileValue,\n    gridItems,\n  })\n\n  const boxplots = significantIndicatorColumns.map(\n    ({ colName, significanceFactor }) => {\n      const color = getSignificanceFactorColor(significanceFactor)\n      // Accessing residuals data\n      const x = gridItems.map((item) => item.residuals[colName])\n      const displayName = getColumnDisplayName(colName)\n      const boxplot = {\n        type: 'violin',\n        x,\n        name: displayName,\n        showlegend: false,\n        // whiskerwidth: 0.2,\n        // boxpoints: 'all',\n        marker: { color, size: 3 },\n        line: {\n          width: 1,\n        },\n      }\n      return boxplot\n    }\n  )\n\n  const currentGridItemMarkers = significantIndicatorColumns.map(\n    ({ colName }) => {\n      const displayName = getColumnDisplayName(colName)\n      const name = `Cell ${displayName}`\n      const y = [displayName]\n      const x = [gridItem.residuals[colName]]\n      const marker = {\n        x,\n        y,\n        name,\n        // text: 'Some really interesting hover info',\n        showlegend: false,\n        marker: selectedCellMarker,\n      }\n      return marker\n    }\n  )\n\n  const currentGridItemLegendTrace = {\n    // Dummy trace to create legend item\n    x: [null],\n    y: [null],\n    name: 'Selected Cell',\n    marker: selectedCellMarker,\n  }\n\n  const factorTraces = [1, -1].map((significanceFactor) => ({\n    // Dummy trace to create legend item\n    x: [null],\n    y: [null],\n    name: `${significanceFactor > 0 ? 'Positive' : 'Negative'} Factor`,\n    marker: {\n      size: 7,\n      symbol: 'square',\n      color: getSignificanceFactorColor(significanceFactor),\n      // line: { color: '#cc00ff', width: 1 },\n    },\n  }))\n\n  const data = [\n    ...boxplots,\n    ...currentGridItemMarkers,\n    // Dummy traces to create legend\n    ...factorTraces,\n    currentGridItemLegendTrace,\n  ]\n\n  const calculatedLayout = useMemo(() => {\n    const rowHeight = 40\n    const height = significantIndicatorColumns.length * rowHeight\n    return {\n      ...layout,\n      width,\n      height,\n    }\n  }, [significantIndicatorColumns.length, width])\n\n  return (\n    <div ref={containerRef} style={{ width: '100%' }}>\n      {!significantIndicatorColumns.length && (\n        <div className=\"notification is-warning is-light\">\n          No indicators of significance\n        </div>\n      )}\n      {!!significantIndicatorColumns.length && (\n        <Plot data={data} layout={calculatedLayout} config={config} />\n      )}\n    </div>\n  )\n}\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { SliderInput } from '../../common/SliderInput'\nimport { setTypologyBoxPlotQuantile } from '../../redux/globalSettingsSlice'\nimport { formatCoordinate } from '../../utils/mapUtils'\nimport { TypologyBoxPlot } from './charts/TypologyBoxPlot'\n\nexport function GridItemWidget({\n  selectedGridItemData,\n  gridItems,\n  clusters,\n  gridItemsPerCluster,\n}) {\n  const typologyBoxPlotQuantile = useSelector(\n    (state) => state.globalSettings.typologyBoxPlotQuantile\n  )\n\n  const gridItem = selectedGridItemData?.[0]\n\n  const { TERRITORY1, ID, clusterNumber, color, fillColor, centerCoords } =\n    gridItem\n\n  const cluster = clusters.find(({ n }) => n === clusterNumber)\n\n  return (\n    <div className=\"Widgets--Box--Inner\">\n      <div className=\"content\">\n        <h3>{TERRITORY1}</h3>\n        <h6 className=\"tag\">{formatCoordinate(centerCoords)}</h6>\n\n        <div className=\"field is-grouped is-grouped-multiline\">\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag\">ID</span>\n              <span className=\"tag is-light has-text-weight-bold\">{ID}</span>\n            </div>\n          </div>\n\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag\">Typology</span>\n              <span\n                className=\"tag\"\n                style={{\n                  backgroundColor: fillColor,\n                  border: `1px solid ${color}`,\n                  fontWeight: 600,\n                }}\n              >\n                {clusterNumber}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <TypologyBoxPlotQuantileInput />\n\n        <TypologyBoxPlot\n          cluster={cluster}\n          gridItems={gridItemsPerCluster[clusterNumber]}\n          gridItem={gridItem}\n          quantileValue={typologyBoxPlotQuantile}\n        />\n      </div>\n    </div>\n  )\n}\n\nfunction TypologyBoxPlotQuantileInput() {\n  const dispatch = useDispatch()\n  const typologyBoxPlotQuantile = useSelector(\n    (state) => state.globalSettings.typologyBoxPlotQuantile\n  )\n  return (\n    <fieldset className=\"field\" style={{ maxWidth: 300 }}>\n      <label className=\"label\" style={{ marginBottom: 18 }}>\n        Quantile for Typology Boxplot:{' '}\n        <span className=\"tag\">{typologyBoxPlotQuantile}</span>\n      </label>\n      <div className=\"control\">\n        <SliderInput\n          min={0}\n          max={0.99}\n          step={0.05}\n          value={typologyBoxPlotQuantile}\n          onChange={(value) => {\n            dispatch(setTypologyBoxPlotQuantile(value))\n          }}\n          aria-label=\"Number of Clusters\"\n        />\n      </div>\n    </fieldset>\n  )\n}\n","import './MapLegend.css'\n\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { SliderInput } from '../../common/SliderInput'\nimport { setNumberOfClusters } from '../../redux/globalSettingsSlice'\n\nexport function MapLegend({ clusters }) {\n  const dispatch = useDispatch()\n  const numberOfClusters = useSelector(\n    (state) => state.globalSettings.numberOfClusters\n  )\n\n  return (\n    <div className=\"MapLegend\">\n      <fieldset className=\"field\" style={{ maxWidth: 330 }}>\n        <label className=\"label\" style={{ marginBottom: 18 }}>\n          Number of Typologies: <span className=\"tag\">{numberOfClusters}</span>\n        </label>\n        <div className=\"control\">\n          <SliderInput\n            min={2}\n            max={10}\n            step={1}\n            value={numberOfClusters}\n            onChange={(value) => {\n              dispatch(setNumberOfClusters(value))\n            }}\n            aria-label=\"Number of Clusters\"\n          />\n        </div>\n      </fieldset>\n\n      <div className=\"MapLegend--Display\">\n        {clusters.map((cluster) => {\n          return (\n            <div\n              className=\"MapLegend--ColourStop\"\n              key={`ColourStop-${cluster.n}`}\n            >\n              <div\n                className=\"MapLegend--ColourBox\"\n                style={{\n                  borderColor: cluster.color,\n                  backgroundColor: cluster.fillColor,\n                }}\n              >\n                <span className=\"MapLegend--Value\">{cluster.n}</span>\n              </div>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n","export function IconButton({ Icon, onClick, ...props }) {\n  const handleKeyDown = (e) => {\n    if (e.code === 'Space' || e.code === 'Enter') {\n      onClick(e)\n    }\n  }\n  return (\n    <Icon\n      role=\"button\"\n      onClick={onClick}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}\n      aria-pressed=\"false\"\n      {...props}\n    />\n  )\n}\n","import './Popup.css'\n\nimport { X as CloseIcon } from 'react-feather'\nimport Modal from 'react-modal'\n\nimport { IconButton } from './IconButton'\n\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\nModal.setAppElement(`body`)\n\nexport function Popup({ title, modalIsOpen, setModalIsOpen, children }) {\n  function afterOpenModal() {}\n\n  function closeModal() {\n    setModalIsOpen(false)\n  }\n\n  return (\n    <Modal\n      isOpen={modalIsOpen}\n      onAfterOpen={afterOpenModal}\n      onRequestClose={closeModal}\n      className=\"Popup--Modal\"\n      overlayClassName=\"Popup--Overlay\"\n    >\n      <div className=\"Popup--Modal--Inner\">\n        {title && <h3 className=\"Popup--Title\">{title}</h3>}\n        <div className=\"Popup--Content\">{children}</div>\n      </div>\n      <IconButton\n        Icon={CloseIcon}\n        className=\"Popup--CloseButton\"\n        onClick={closeModal}\n      />\n    </Modal>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/fig1.f2937d0d.png\";","import './Menu.css'\n\nimport { Fragment, useState } from 'react'\n\nimport { IconButton } from '../../common/IconButton'\nimport { Popup } from '../../common/Popup'\nimport fig1 from '../../images/fig1.png'\n\nconst MenuPopupContent = () => (\n  <div>\n    <figure style={{ width: '100%', maxWidth: 550 }}>\n      <img src={fig1} alt=\"Figure 1\" width={1488} height={1334} />\n      <figcaption>\n        Figure 1: Flow diagram of the nine key methodological steps used to map\n        and diagnose spatially explicit typologies of coastal wetland ecosystem\n        condition applicable at a global scale.\n      </figcaption>\n    </figure>\n  </div>\n)\n\nconst MenuIcon = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"11.5\"></circle>\n      <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path>\n      <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\n    </svg>\n  )\n}\n\nexport function Menu() {\n  const [menuIsOpen, setMenuIsOpen] = useState(false)\n  const showMenuHelpText = true\n\n  const menuPopupTitle = 'Glowdex App'\n\n  const openMenu = () => {\n    setMenuIsOpen(true)\n  }\n\n  return (\n    <Fragment>\n      <div className=\"Menu--MenuButtonWrap\" data-hashelptext={showMenuHelpText}>\n        <IconButton\n          Icon={MenuIcon}\n          onClick={openMenu}\n          className=\"Menu--MenuButton\"\n          title=\"Open Menu\"\n          tabIndex={1}\n        />\n        <div className=\"Menu--HelpText\">\n          Click on a grid cell to get started\n        </div>\n      </div>\n      <Popup\n        title={menuPopupTitle}\n        modalIsOpen={menuIsOpen}\n        setModalIsOpen={setMenuIsOpen}\n      >\n        <MenuPopupContent />\n      </Popup>\n    </Fragment>\n  )\n}\n","export function WidgetBox({ children, onClose, ...props }) {\n  return (\n    <div className=\"Widgets--Box\" {...props}>\n      {children}\n    </div>\n  )\n}\n","import './Widgets.css'\n\nimport { useSelectedGridItemData } from '../../utils/dataHooks'\nimport { GridItemWidget } from './GridItemWidget'\nimport { MapLegend } from './MapLegend'\nimport { Menu } from './Menu'\nimport { WidgetBox } from './WidgetBox'\n\nexport function Widgets({\n  mapFeatures,\n  gridItems,\n  clusters,\n  isLoading,\n  gridItemsPerCluster,\n}) {\n  const { selectedGridItemData } = useSelectedGridItemData({\n    mapFeatures,\n    gridItems,\n  })\n\n  return (\n    <div className=\"Widgets--Wrap\">\n      <Menu />\n\n      {!isLoading && (\n        <WidgetBox>\n          <MapLegend clusters={clusters} />\n        </WidgetBox>\n      )}\n\n      {!!selectedGridItemData?.length && (\n        <WidgetBox>\n          <GridItemWidget\n            selectedGridItemData={selectedGridItemData}\n            clusters={clusters}\n            gridItemsPerCluster={gridItemsPerCluster}\n            gridItems={gridItems}\n          />\n        </WidgetBox>\n      )}\n    </div>\n  )\n}\n","import ReactSplit, { SplitDirection } from '@devbookhq/splitter'\n\nimport { Map } from '../features/map/Map'\nimport { Widgets } from '../features/widgets/Widgets'\nimport { useMapData } from '../utils/dataHooks'\nimport styles from './App.module.css'\n\nconst initialPanelSizes = [40, 60]\n\nexport function App() {\n  const { mapFeatures, gridItems, clusters, gridItemsPerCluster, isLoading } =\n    useMapData()\n  return (\n    <main className={styles.main}>\n      <ReactSplit\n        direction={SplitDirection.Horizontal}\n        initialSizes={initialPanelSizes}\n        minWidth={300}\n        gutterClassName={styles.ReactSplitGutterHorizontal}\n        draggerClassName={styles.ReactSplitDraggerHorizontal}\n      >\n        <Widgets\n          mapFeatures={mapFeatures}\n          gridItems={gridItems}\n          clusters={clusters}\n          isLoading={isLoading}\n          gridItemsPerCluster={gridItemsPerCluster}\n        />\n        <Map\n          mapFeatures={mapFeatures}\n          gridItems={gridItems}\n          clusters={clusters}\n          isLoading={isLoading}\n        />\n      </ReactSplit>\n    </main>\n  )\n}\n","import {\n  FLUSH,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n  REHYDRATE,\n  persistReducer,\n  persistStore,\n} from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nimport {\n  combineReducers,\n  configureStore,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit'\n\nimport globalSettingsSlice from './globalSettingsSlice'\nimport gridItemsSlice from './gridItemsSlice'\n\nconst createPersistedReducer = ({ key, reducer, config = {} }) => {\n  const persistConfig = {\n    key,\n    storage,\n    ...config,\n  }\n\n  const persistedReducer = persistReducer(persistConfig, reducer)\n  return persistedReducer\n}\n\nconst rootReducer = combineReducers({\n  globalSettings: createPersistedReducer({\n    reducer: globalSettingsSlice,\n    key: 'globalSettings',\n  }),\n  gridItems: gridItemsSlice,\n})\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n})\nexport const persistor = persistStore(store)\n","import 'modern-normalize/modern-normalize.css'\nimport 'bulma/css/bulma.css'\n\nimport './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport { App } from './app/App'\nimport { persistor, store } from './redux/store'\n\nconst appElementID = 'root'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(appElementID)\n)\n"],"sourceRoot":""}